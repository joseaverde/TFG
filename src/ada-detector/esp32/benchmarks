==== Benchmarking [master 061dfaa] ============================================
Baseline for benchmarking. I'm going to be adding functions one by one.
Sometimes even applying optimisations to see how it increases (or decreases)
the overall performance.

Max_distance: 2970 epochs/second
Energy:       152 epochs/second


==== Benchmarking [master 4ca2ebb] ============================================
In the Detector.Signals.Generic_Energy function we change:
   Squared ((Uniform_Inter (Item (I)) - Uniform_Inter (μ)) / 2)
To be:
   Squared (Item (I) / 2 - μ / 2)
In both cases `Item (I)' and `μ' are 32 bit fixed point types of type
`Sample_Type = (-1.0, 1.0)'. In the first case they are casted into a 64 bit
value, divided by 2 and squared. In the second one, they are first divided by
to, then substracted then squared.
   The thing is that squaring 64 bit fixed point type requires 128 bits. And
the division (shift) afterwards is costly. However, if we lose one bit of
precision and square a 32 bit fixed point type, we can do it pretty fast
(RISC-V has two instruction `mulh' and `mul' which avoid having a 64 bit
intermediate type).
   That way we increment the number of epochs per second from 152 to 1689:
A x11.11 speed-up of that part of the program.

Max_distance: 2970 epochs/second
Energy:       1688 epochs/second

==== Benchmarking [master eb982a9] ============================================
Added the Batch Normalisation and the Dynamic Time Warping. But they are yet
to be proven. The Energy could be further optimised by optimising the Variance:

   σ²(x) = Σ (xi² - μ)² / n
         = Σ (xi² - 2xiμ + μ²) / n              [(a² - b²) = (a² - 2ab + b²)]
         = Σ xi² / n + Σ (-2xiμ) / n + Σ μ² / n [Separate Σ into three parts]
         = Σ xi² / n -2μ Σ xi / n + μ² Σ 1 / n  [Factor constants (μ and -2)]
         = Σ xi² / n -2μ Σ xi / n + μ²          [Σ 1 = n ->² Σ 1 / n = 1]

Max_distance: 2903 epochs/second
Energy:       1711 epochs/second
Batch Normal: 4358 epochs/second
Single DTW:   40 epochs/second

==== Benchmarking [master 7900fca] ============================================
Finished adding the DTW (proven) and Batch normalisation (not yet proven). And
most of the algorithm runs on the ESP32. It remains to implement the PSD
function which is composed of:
 * Simpson
 * Welch
 * Fast Fourier Transform (FFT)
There is a paper about implementing the FFT. The Welch is trivial if the FFT
returns a normalised result. And Simpson may prove to be a little bit hard
because of the reduction (but nothing that cannot be implemented).

Max_distance: 2901 epochs/second
Energy:       1688 epochs/second
Batch Normal: 4211 epochs/second
Single DTW:   40 epochs/second
.........................
Elapsed: 1.02000E+00 s
Ratio:   25 epochs/second
.........................
