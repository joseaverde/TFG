with "sparklib_common";

abstract project SPARKlib_External is

   for Externally_Built use SPARKlib_common.SPARKlib_Installed;

   -- This project is not supposed to be used directly. Instead, copy
   -- sparklib.gpr in your code and provide appropriate values for the object
   -- directory Object_Dir (so that compilation and artifacts are generated in
   -- directories under your control) and the list of excluded source files
   -- Excluded_Source_Files (so that you only compile and analyse files from
   -- the library that you need).

   case SPARKlib_common.SPARKlib_Installed is
      when "True" =>
         for Source_Dirs use (SPARKlib_Common'Project_Dir & "/../../include/spark");
      when others =>
         for Source_Dirs use (SPARKlib_Common'Project_Dir & "/src");
   end case;

   SPARK_Body_Mode : SPARKlib_common.SPARK_Body_Mode_T := SPARKlib_common.SPARK_Body_Mode;

   package Compiler is
      --  Enforce GNAT style checks, except for multiple blank lines which does
      --  not work for preprocessed files, and alphabetical ordering of
      --  subprogram bodies (although not applicable to null subprograms).
      for Default_Switches ("Ada") use
         ("-gnat2022", "-gnatygo-u", "-gnata",
	  "-gnatwI",  --  disable warnings about SPARKlib using GNAT internal units
          "-gnateDSPARK_BODY_MODE=" & SPARK_Body_Mode);
   end Compiler;

   package Prove renames SPARKlib_common.Prove;

   Common_Excluded_Source_Files := ("spark-big_integers__light.ads",
				  "spark-big_intervals__light.ads",
				  "spark-big_reals__light.adb",
				  "spark-big_reals__light.ads",
				  "spark-containers-functional-infinite_sequences__light.adb",
				  "spark-containers-functional-infinite_sequences__light.ads",
				  "spark-containers-functional-maps__light.adb",
				  "spark-containers-functional-maps__light.ads",
				  "spark-containers-functional-multisets__light.adb",
				  "spark-containers-functional-multisets__light.ads",
				  "spark-containers-functional-sets__light.adb",
				  "spark-containers-functional-sets__light.ads",
				  "spark-containers-functional-vectors__light.adb",
				  "spark-containers-functional-vectors__light.ads",
				  "spark-containers-types__light.ads");

   case SPARK_Body_Mode is
      when "On" =>
         for Excluded_Source_Files use Common_Excluded_Source_Files
                                       & ("spark-containers.ads");
      when "Off" =>
         for Excluded_Source_Files use Common_Excluded_Source_Files
                                       & ("spark-containers__exec.ads");
   end case;

   package Naming is
      case SPARK_Body_Mode is
         when "On" =>
            for Spec ("SPARK.Containers") use "spark-containers__exec.ads";
         when "Off" =>
            null;
      end case;
   end Naming;

end SPARKlib_External;
