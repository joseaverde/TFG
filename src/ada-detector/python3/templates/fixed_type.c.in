#include "${Header_Name}"

#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stdint.h>
#include <stdbool.h>
#include <iso646.h>

typedef int${Fixed_Bits}_t fixed_t;

/* ==== External Functions ================================================= */

/* *** Constructors *** */
extern fixed_t ${Prefix}_zero        (void);
extern fixed_t ${Prefix}_from_double (double);
extern fixed_t ${Prefix}_from_long   (long);
extern fixed_t ${Prefix}_from_frac   (long, long);

/* *** Binary operations *** */
extern fixed_t ${Prefix}_add         (fixed_t, fixed_t);
extern fixed_t ${Prefix}_sub         (fixed_t, fixed_t);
extern int     ${Prefix}_cmp         (fixed_t, fixed_t);

/* *** Unary operations *** */
extern fixed_t ${Prefix}_abs         (fixed_t);
extern fixed_t ${Prefix}_pos         (fixed_t);
extern fixed_t ${Prefix}_neg         (fixed_t);

/* *** Attributes *** */
extern fixed_t ${Prefix}_delta       (void);
extern fixed_t ${Prefix}_first       (void);
extern fixed_t ${Prefix}_last        (void);

/* *** Conversions *** */
extern long    ${Prefix}_to_long    (long);
extern char *  ${Prefix}_to_str     (long);

/* ==== Python Functions =================================================== */

typedef struct { PyObject_HEAD fixed_t value; } FixedObject;

static PyObject *
Fixed_new (PyTypeObject *type, PyObject *args, PyObject *kwds) {
  FixedObject *self;
  self = (FixedObject *)type->tp_alloc(type, 0);
  if (self) {
    self->value = ${Prefix}_zero();
  }
  return (PyObject*)self;
}

static PyObject *
Fixed_str(FixedObject *obj) {
  char * temp = ${Prefix}_to_str (obj->value);
  PyObject * result = PyUnicode_FromString(temp);
  free(temp);
  return result;
}

static PyObject *
Fixed_repr(FixedObject *obj) {
  char * temp = ${Prefix}_to_str (obj->value);
  PyObject * result = PyUnicode_FromFormat("{fixed}(%s)", temp);
  free(temp);
  return result;
}

static int
Fixed_init (FixedObject *self, PyObject *args, PyObject *kwds) {
  Py_ssize_t size = PyTuple_Size(args);
  self->value = ${Prefix}_zero ();
  if (size < 0) { return -1; }
  else if (size == 0) { }
  else if (size == 2) {
    // A fraction of two integers
    long num, den;
    if (not PyArg_ParseTuple(args, "ll", &num, &den)) {
      return -1;
    }
    self->value = ${Prefix}_from_frac (num, den);
  } else if (size == 1) {
    long as_long;
    double as_double;
    if (PyArg_ParseTuple(args, "l", &as_long)) {
      self->value = ${Prefix}_from_long (as_long);
    } else if (PyArg_ParseTuple(args, "d", &as_double)) {
      self->value = ${Prefix}_from_double (as_double);
    } else {
      return -1;
    }
  } else {
    return -1;
  }
  return 0;
}

static PyTypeObject FixedType = {
  .ob_base = PyVarObject_HEAD_INIT(NULL, 0)
  .tp_name = "{MODULE}.{fixed}",
  .tp_doc = PyDoc_STR("Fixed point"),
  .tp_basicsize = sizeof(FixedObject),
  .tp_itemsize = 0,
  .tp_flags = Py_TPFLAGS_DEFAULT,
  .tp_str = (reprfunc)Fixed_str,
  .tp_repr = (reprfunc)Fixed_repr,
  .tp_init = (initproc) Fixed_init,
  .tp_new = Fixed_new,
};

extern bool {C_PREFIX}_fixed_{fixed.suffix()}_register (PyObject * m) {
  if (PyModule_AddObjectRef(m, "{fixed}", (PyObject*)&FixedType) < 0) {
    Py_DECREF(m);
    return false;
  }
  return true;
}

extern bool {C_PREFIX}_fixed_{fixed.suffix()}_prepare (void) {
  return (PyType_Ready(&FixedType) >= 0);
}
