with "detector_common.gpr";
with "config/seizure_detector_fixed_config.gpr";
library project Seizure_Detector_Fixed extends "sparklib_external" is

   for Create_Missing_Dirs use "True";
   for Target use Detector_Common.Target;
   for Runtime ("Ada") use Detector_Common.Runtime;
   for Create_Missing_Dirs use "True";

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
      External ("SEIZURE_DETECTOR_FIXED_LIBRARY_TYPE",
         External ("LIBRARY_TYPE", "static"));
   case Detector_Common.Target_Name is
      when "native" => null;
      when others   => Library_Type := "static";
   end case;

   Extra_Interface := ();
   case Seizure_Detector_Fixed_Config.Parallel is
      when "True" =>
         Extra_Interface := Extra_Interface & (
            "Detector.Parallel_Runners",
            "Detector.Parallel_Utils");
      when others => null;
   end case;

   for Library_Kind use Library_Type;
   for Library_Name use "SeizureDetectorFixed";
   for Library_Dir use "lib/" & Detector_Common.Suffix;
   for Library_Interface use Extra_Interface & (
      "Debug_IO",
      "Default_Detector",
      "Detector",
      "Detector.Batches",
      "Detector.Batches.Runner",
      "Detector.Batches.Validator",
      "Detector.Containers",
      "Detector.Containers.Vectors",
      "Detector.Numerics",
      "Detector.Numerics.Complex_Types_Operations",
      "Detector.Numerics.Elementary_Functions",
      "Detector.Numerics.Generic_Complex_Types",
      "Detector.Signals",
      "Detector.Signals.Batch_Normalisation",
      "Detector.Signals.Fast_Fourier_Transform",
      "Detector.Signals.Fast_Fourier_Transform_Details",
      "Detector.Signals.Generic_Energy",
      "Detector.Signals.Generic_Dynamic_Time_Warping",
      "Detector.Signals.Generic_Max_Distance",
      "Detector.Signals.Generic_Simpson",
      "Detector.Signals.Generic_Welch",
      "Detector.Signals.Lemmas",
      "Detector.Signals.Mean",
      "Detector.Signals.Quarter_Variance",
      "Detector.Signals.Windows",
      "Spark",
      "Spark.Lemmas"
      );
   for Object_Dir use "obj/" & Detector_Common.Suffix;
   for Source_Dirs use ("config", "src") & SPARKlib_External.Source_Dirs;
   for Excluded_Source_Files use SPARKlib_External'Excluded_Source_Files;
      -- Uncomment the files you want to exclude from your project
      -- & (
      -- "spark-big_integers.ads",
      -- "spark-big_intervals.ads",
      -- "spark-big_reals.ads",
      -- "spark-containers.ads",
      -- "spark-containers-formal.ads",
      -- "spark-containers-formal-doubly_linked_lists.adb",
      -- "spark-containers-formal-doubly_linked_lists.ads",
      -- "spark-containers-formal-hashed_maps.adb",
      -- "spark-containers-formal-hashed_maps.ads",
      -- "spark-containers-formal-hashed_sets.adb",
      -- "spark-containers-formal-hashed_sets.ads",
      -- "spark-containers-formal-holders.adb",
      -- "spark-containers-formal-holders.ads",
      -- "spark-containers-formal-ordered_maps.adb",
      -- "spark-containers-formal-ordered_maps.ads",
      -- "spark-containers-formal-ordered_sets.adb",
      -- "spark-containers-formal-ordered_sets.ads",
      -- "spark-containers-formal-unbounded_doubly_linked_lists.adb",
      -- "spark-containers-formal-unbounded_doubly_linked_lists.ads",
      -- "spark-containers-formal-unbounded_hashed_maps.adb",
      -- "spark-containers-formal-unbounded_hashed_maps.ads",
      -- "spark-containers-formal-unbounded_hashed_sets.adb",
      -- "spark-containers-formal-unbounded_hashed_sets.ads",
      -- "spark-containers-formal-unbounded_ordered_maps.adb",
      -- "spark-containers-formal-unbounded_ordered_maps.ads",
      -- "spark-containers-formal-unbounded_ordered_sets.adb",
      -- "spark-containers-formal-unbounded_ordered_sets.ads",
      -- "spark-containers-formal-unbounded_vectors.adb",
      -- "spark-containers-formal-unbounded_vectors.ads",
      -- "spark-containers-formal-vectors.adb",
      -- "spark-containers-formal-vectors.ads",
      -- "spark-containers-functional.ads",
      -- "spark-containers-functional-base.adb",
      -- "spark-containers-functional-base.ads",
      -- "spark-containers-functional-infinite_sequences.adb",
      -- "spark-containers-functional-infinite_sequences.ads",
      -- "spark-containers-functional-infinite_sequences-higher_order.adb",
      -- "spark-containers-functional-infinite_sequences-higher_order.ads",
      -- "spark-containers-functional-maps.adb",
      -- "spark-containers-functional-maps.ads",
      -- "spark-containers-functional-maps-higher_order.adb",
      -- "spark-containers-functional-maps-higher_order.ads",
      -- "spark-containers-functional-multisets.adb",
      -- "spark-containers-functional-multisets.ads",
      -- "spark-containers-functional-sets.adb",
      -- "spark-containers-functional-sets.ads",
      -- "spark-containers-functional-sets-higher_order.adb",
      -- "spark-containers-functional-sets-higher_order.ads",
      -- "spark-containers-functional-vectors.adb",
      -- "spark-containers-functional-vectors.ads",
      -- "spark-containers-functional-vectors-higher_order.adb",
      -- "spark-containers-functional-vectors-higher_order.ads",
      -- "spark-containers-parameter_checks.adb",
      -- "spark-containers-parameter_checks.ads",
      -- "spark-containers-stable_sorting.adb",
      -- "spark-containers-stable_sorting.ads",
      -- "spark-containers-types.ads",
      -- "spark-conversions.ads",
      -- "spark-conversions-float_conversions.ads",
      -- "spark-conversions-long_float_conversions.ads",
      -- "spark-conversions-long_integer_conversions.ads",
      -- "spark-cut_operations.adb",
      -- "spark-cut_operations.ads",
      -- "spark-higher_order.adb",
      -- "spark-higher_order.ads",
      -- "spark-higher_order-fold.adb",
      -- "spark-higher_order-fold.ads",
      -- "spark-lemmas.ads",
      -- "spark-lemmas-arithmetic.adb",
      -- "spark-lemmas-arithmetic.ads",
      -- "spark-lemmas-constrained_array.adb",
      -- "spark-lemmas-constrained_array.ads",
      -- "spark-lemmas-fixed_point_arithmetic.adb",
      -- "spark-lemmas-fixed_point_arithmetic.ads",
      -- "spark-lemmas-float_arithmetic.ads",
      -- "spark-lemmas-float_base.ads",
      -- "spark-lemmas-floating_point_arithmetic.adb",
      -- "spark-lemmas-floating_point_arithmetic.ads",
      -- "spark-lemmas-integer_arithmetic.ads",
      -- "spark-lemmas-long_float_arithmetic.ads",
      -- "spark-lemmas-long_integer_arithmetic.ads",
      -- "spark-lemmas-mod32_arithmetic.ads",
      -- "spark-lemmas-mod64_arithmetic.ads",
      -- "spark-lemmas-mod_arithmetic.adb",
      -- "spark-lemmas-mod_arithmetic.ads",
      -- "spark-lemmas-unconstrained_array.adb",
      -- "spark-lemmas-unconstrained_array.ads",
      -- "spark-pointers-abstract_maps.ads",
      -- "spark-pointers-abstract_sets.adb",
      -- "spark-pointers-abstract_sets.ads",
      -- "spark-pointers.ads",
      -- "spark-pointers-pointers_with_aliasing.adb",
      -- "spark-pointers-pointers_with_aliasing.ads",
      -- "spark-pointers-pointers_with_aliasing_separate_memory.adb",
      -- "spark-pointers-pointers_with_aliasing_separate_memory.ads",
      -- "spark-tests.ads",
      -- "spark-tests-array_lemmas.adb",
      -- "spark-tests-array_lemmas.ads"
      -- );

   package Compiler renames Detector_Common.Compiler;
   package Binder renames Detector_Common.Binder;
   package Install renames Detector_Common.Install;
   package Builder renames Detector_Common.Builder;
   package Naming is
      for Implementation ("Detector.Batches.Validator") use
         "detector-batches-validator"&Detector_Common.Parallel_Suffix&".adb";
   end Naming;

end Seizure_Detector_Fixed;
