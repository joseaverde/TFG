==== Benchmarking [master 061dfaa] ============================================
Baseline for benchmarking. I'm going to be adding functions one by one.
Sometimes even applying optimisations to see how it increases (or decreases)
the overall performance.

Max_distance: 2970 epochs/second
Energy:       152 epochs/second


==== Benchmarking [master 4ca2ebb] ============================================
In the Detector.Signals.Generic_Energy function we change:
   Squared ((Uniform_Inter (Item (I)) - Uniform_Inter (μ)) / 2)
To be:
   Squared (Item (I) / 2 - μ / 2)
In both cases `Item (I)' and `μ' are 32 bit fixed point types of type
`Sample_Type = (-1.0, 1.0)'. In the first case they are casted into a 64 bit
value, divided by 2 and squared. In the second one, they are first divided by
to, then substracted then squared.
   The thing is that squaring 64 bit fixed point type requires 128 bits. And
the division (shift) afterwards is costly. However, if we lose one bit of
precision and square a 32 bit fixed point type, we can do it pretty fast
(RISC-V has two instruction `mulh' and `mul' which avoid having a 64 bit
intermediate type).
   That way we increment the number of epochs per second from 152 to 1689:
A x11.11 speed-up of that part of the program.

Max_distance: 2970 epochs/second
Energy:       1688 epochs/second

==== Benchmarking [master eb982a9] ============================================
Added the Batch Normalisation and the Dynamic Time Warping. But they are yet
to be proven. The Energy could be further optimised by optimising the Variance:

   σ²(x) = Σ (xi² - μ)² / n
         = Σ (xi² - 2xiμ + μ²) / n              [(a² - b²) = (a² - 2ab + b²)]
         = Σ xi² / n + Σ (-2xiμ) / n + Σ μ² / n [Separate Σ into three parts]
         = Σ xi² / n -2μ Σ xi / n + μ² Σ 1 / n  [Factor constants (μ and -2)]
         = Σ xi² / n -2μ Σ xi / n + μ²          [Σ 1 = n ->² Σ 1 / n = 1]

Max_distance: 2903 epochs/second
Energy:       1711 epochs/second
Batch Normal: 4358 epochs/second
Single DTW:   40 epochs/second


==== Benchmarking [master 7900fca] ============================================
Finished adding the DTW (proven) and Batch normalisation (not yet proven). And
most of the algorithm runs on the ESP32. It remains to implement the PSD
function which is composed of:
 * Simpson
 * Welch
 * Fast Fourier Transform (FFT)
There is a paper about implementing the FFT. The Welch is trivial if the FFT
returns a normalised result. And Simpson may prove to be a little bit hard
because of the reduction (but nothing that cannot be implemented).

Max_distance: 2901 epochs/second
Energy:       1688 epochs/second
Batch Normal: 4211 epochs/second
Single DTW:   40 epochs/second
.........................
Elapsed: 1.02000E+00 s
Ratio:   25 epochs/second
.........................


==== Benchmarking [master 92fcb9a] ============================================
Proved normalisation, it needed a new branch for each division, which
surprisingly didn't impact performance on the Batch Normalisation function but
it did for the Single DTW... That got me thinking, and I saw I had an assigment
to 1 and never called the normalisation function :)
   Just for the record, I reverted the changes to when there was no branch in
the function and the Batch Normal was at 144 epochs/second.

Benchmarking
Max_distance: 2837 epochs/second
Energy:       1688 epochs/second
Batch Normal: 78 epochs/second
Single DTW:   27 epochs/second
.........................
Elapsed: 1.00000E+00 s
Ratio:   25 epochs/second
.........................

Now, the thing that bothers me is the seizure_function itself. Why it doesn't
get worse?! That's what I'll try to fix in the next commits. First lest
optimise the batch normalisation a little bit.

==== Benchmarking [master 6e4d2f0] ============================================
After meddling a little bit with the function, I refactored it a little bit.
Precomputed some values and simplified the expression. It is now faster. And
the detector is (finally slower).

Benchmarking
Max_distance: 2837 epochs/second
Energy:       1688 epochs/second
Batch Normal: 78 epochs/second
Single DTW:   27 epochs/second
......................
Elapsed: 1.00000E+00 s
Ratio:   22 epochs/second
......................

==== Benchmarking [master d0b2cfc] ============================================
Added the unproved Fast Fourier Transform (FFT). There was no change over
Max_distance whatsoever, but there seems to be an increase in performance.

Max_distance: 2901 epochs/second
Energy:       1688 epochs/second
Batch Normal: 78 epochs/second
Single DTW:   27 epochs/second
FFT:          98 epochs/second
......................
Elapsed: 1.02000E+00 s
Ratio:   22 epochs/second
......................

==== Benchmarking [master 24563ac] ============================================
Added PSDs to the detector. Obviously it decreases the amount of epochs per
second. About the variations in the other features. I think it happens because
of the Duration precision. In some of them it is 1.00000E+00 s, in the last one
it is 1.02000E+00, and in this one it is 1.08000E+00. Nothin to important.
   I runned the program with VTune on my laptop and I got the following
results:
 - 71.9% : Dynamic Time Warping
 - 23.6% : Power Spectral Density
   - 21.4% : Fast Fourier Transform
     - 19.7% : Fast Fourier Operation (Conquer)
       - 6.3% : cosπ
   -  0.9% : cosπ
 -  4.5% : Batch Normalisation
   -  4.2% : system__arith_64__scaled_divide64
   -  0.2% : Mean
Just the `cosπ' function had 7.2% of the whole running time!! One possible
optimisations is to caché it. In which case, packages will stop being Pure or
Preelaborate. Another thing that could be done is make the `cospi' function
Static so that it can be computed at compile time!
   Dynamic time warping keeps being the worst of them. And it will prove to be
difficult to optimise. Also the prove of the algorithms may worsen the current
performance.
   However, for the time being we are processing a 5 second signal, with 3
patterns in 1/11th of a second 91 ms approximately. That gives use a total of
909 ms for either sleeping (less energy). Cleaining up the signal, etc...

Benchmarking
Max_distance: 2838 epochs/second
Energy:       1666 epochs/second
Batch Normal: 78 epochs/second
Single DTW:   27 epochs/second
FFT:          97 epochs/second
............
Elapsed: 1.08000E+00 s
Ratio:   11 epochs/second
............

==== Benchmarking [master e4892fe] ============================================
Finished finally the Welch function. I needed to denormalise twice. And I was
doing the Simpson over the normal Signal without applying Welch. There is no
worseining in the number of Epochs per second. The only problem right now is
proving the abscence of errors, improving the quality of the results and
improving a little bit more the performance.

Max_distance: 2902 epochs/second
Energy:       1688 epochs/second
Batch Normal: 78 epochs/second
Single DTW:   27 epochs/second
FFT:          98 epochs/second
...........
Elapsed: 1.04000E+00 s
Ratio:   11 epochs/second
...........
